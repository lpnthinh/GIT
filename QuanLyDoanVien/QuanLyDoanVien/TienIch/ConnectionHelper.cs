//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using QuanLyDoanVien.HeThong;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Data;

namespace QuanLyDoanVien.TienIch
{

    public static class ConnectionHelper
    {
        public static string ConnectionString = string.Empty;
        public static string GetConnString(string db, string user, string pass)
        {
            return DevExpress.Xpo.DB.AccessConnectionProvider.GetConnectionString(db, user, pass);
        }
        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption)
        {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption);
        }
        public static DevExpress.Xpo.DB.IDataStore GetConnectionProvider(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption, out IDisposable[] objectsToDisposeOnDisconnect)
        {
            return XpoDefault.GetConnectionProvider(ConnectionString, autoCreateOption, out objectsToDisposeOnDisconnect);
        }
        public static IDataLayer GetDataLayer(DevExpress.Xpo.DB.AutoCreateOption autoCreateOption)
        {
            return XpoDefault.GetDataLayer(ConnectionString, autoCreateOption);
        }
        public static string GetConnectionString(int serverType, int connectUsing, string serverName, string user, string pass, string database)
        {
            string strConn = string.Empty;
            switch (serverType)
            {
                case (int)ServerType.MSSQL:
                    if (connectUsing == 0)
                        strConn = DevExpress.Xpo.DB.MSSqlConnectionProvider.GetConnectionString(serverName, database);
                    else
                        strConn = DevExpress.Xpo.DB.MSSqlConnectionProvider.GetConnectionString(serverName, user, pass, database);
                    break;
                case (int)ServerType.ACCESS:
                    if (connectUsing == 0)
                        strConn = DevExpress.Xpo.DB.AccessConnectionProvider.GetConnectionString(database);
                    else
                        strConn = DevExpress.Xpo.DB.AccessConnectionProvider.GetConnectionString(database, user, pass);
                    break;
            }
            return strConn;
        }
        public static bool Connect()
        {
            int serverTyppe = Convert.ToInt32(AppConfig.GetValue("ServerType"));
            int mode = Convert.ToInt32(AppConfig.GetValue("ConnectionMode"));
            string server = AppConfig.GetValue("Server");
            string user = AppConfig.GetValue("User");
            string pass = AppConfig.GetValue("Password");
            string db = AppConfig.GetValue("Database");
            if (serverTyppe == (int)ServerType.ACCESS)
            {
                if (!db.Contains(@"\"))
                {
                    db = string.Format(@"{0}\Data\{1}", Application.StartupPath, db);
                    AppConfig.SetValue("Database", db);
                }
            }
            ConnectionString = GetConnectionString(serverTyppe, mode, server, user, pass, db);

            try
            {
                // KHÔNG XÀI DÒNG TRÊN ĐƯỢC VỚI FB
                //XpoDefault.DataLayer = XpoDefault.GetDataLayer(ConnectionString, DevExpress.Xpo.DB.AutoCreateOption.DatabaseAndSchema);
                XpoDefault.ConnectionString = ConnectionString;

                Session s = new Session() { ConnectionString = ConnectionString };
                s.Connect();
                s.UpdateSchema();
                s.Disconnect();
                XpoDefault.Session.AutoCreateOption = DevExpress.Xpo.DB.AutoCreateOption.DatabaseAndSchema;
                XpoDefault.Session.UpdateSchema();
                return true;
            }
            catch (Exception ex)
            {
                MsgBox.ShowErrorDialog(ex.Message);
                return false;
            }
        }
        public static void BackupAccess()
        {
            var saveDlg = new SaveFileDialog() { FileName = string.Format("{0}{1:ddMMyyyy_HHmmss}.mdb", Constant.DATABASE_NAME_ACCESS, DateTime.Now), Filter = "Access File (*.mdb)|*.mdb|All files (*.*)|*.*" };
            if (saveDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                MsgBox.ShowWaitForm("Đang sao lưu dữ liệu ...");

                string source = AppConfig.GetValue("Database");
                if (File.Exists(source))
                {
                    File.Copy(source, saveDlg.FileName, true);
                }

                MsgBox.CloseWaitForm();
                MsgBox.ShowSuccessfulDialog("Đã sao lưu thành công");
            }
        }
        public static void RestoreAccess()
        {
            var opdl = new OpenFileDialog() { Filter = "Access File (*.mdb)|*.mdb|All files (*.*)|*.*" };
            if (opdl.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    MsgBox.ShowWaitForm("Đang phục hồi dữ liệu ...");
                    string des = AppConfig.GetValue("Database");
                    File.Copy(opdl.FileName, des, true);
                    string s = Application.ExecutablePath;

                    MsgBox.CloseWaitForm();
                    MsgBox.ShowSuccessfulDialog("Đã phục hồi thành công. Chương trình sẽ khởi động lại");

                    Application.ExitThread();
                    Process.Start(s, "reset");
                }
                catch (Exception ex)
                {
                    MsgBox.ShowErrorDialog(ex.Message);
                }
            }
        }
        public static void BackupSQL()
        {
            int mode = Convert.ToInt32(AppConfig.GetValue("ConnectionMode"));
            string server = AppConfig.GetValue("Server");
            string user = AppConfig.GetValue("User");
            string pass = AppConfig.GetValue("Password");
            string db = AppConfig.GetValue("Database");

            SaveFileDialog saveDlg = new SaveFileDialog() { FileName = string.Format("{0}{1:ddMMyyyy_HHmmss}.bak", Constant.DATABASE_NAME_MSSQL, DateTime.Now), Filter = "Backup (*.bak)|*.bak" };
            if (saveDlg.ShowDialog() == DialogResult.OK)
            {
                MsgBox.ShowWaitForm("Đang sao lưu dữ liệu ...");

                string fileName = saveDlg.FileName;
                if (fileName == string.Empty) return;

                try
                {
                    string str = string.Empty;
                    if (mode == 0) str = string.Format("Data Source={0};Initial Catalog={1};Integrated Security=SSPI", server, db);
                    else str = string.Format("User ID={0};password={1};Initial Catalog={2};Data Source={3}", user, pass, db, server);
                    SqlConnection conn = new SqlConnection(str);
                    conn.Open();
                    string sqlBackup = string.Format("BACKUP DATABASE [{0}] TO DISK = '{1}' WITH INIT , NOUNLOAD , name = 'BKdb' , NOSKIP , STATS = 10 , Description = 'BKdb' , NOFORMAT ", db, fileName);
                    SqlCommand comm = new SqlCommand(sqlBackup, conn) { CommandType = CommandType.Text };
                    comm.ExecuteNonQuery();
                    comm.Dispose();
                    conn.Close();

                    MsgBox.CloseWaitForm();
                    MsgBox.ShowSuccessfulDialog(string.Format("Sao lưu thành công\nĐường dẫn: {0}", fileName));
                }
                catch (Exception ex)
                {
                    MsgBox.CloseWaitForm();
                    MsgBox.ShowUnsuccessfulDialog("Sao lưu không thành công");
                    Console.WriteLine(ex.Message);
                    WriteLog.WriteLogText(ex.Message);
                }
            }
        }
        public static void RestoreSQL()
        {
            int mode = Convert.ToInt32(AppConfig.GetValue("ConnectionMode"));
            string server = AppConfig.GetValue("Server");
            string user = AppConfig.GetValue("User");
            string pass = AppConfig.GetValue("Password");
            string db = AppConfig.GetValue("Database");

            var openDgl = new OpenFileDialog() { Filter = "Restore (*.bak)|*.bak" };
            if (openDgl.ShowDialog() == DialogResult.OK)
            {
                string fileRestore = openDgl.FileName;

                try
                {
                    MsgBox.ShowWaitForm("Đang phục hồi dữ liệu ...");
                    string str = string.Empty;
                    if (mode == 0) str = string.Format("Data Source={0};Initial Catalog={1};Integrated Security=SSPI", server, db);
                    else str = string.Format("User ID={0};password={1};Initial Catalog={2};Data Source={3}", user, pass, db, server);
                    SqlConnection conn = new SqlConnection(str);
                    conn.Open();

                    string sqlRestore = string.Format("USE MASTER RESTORE DATABASE [{0}] FROM  DISK = N'{1}' WITH  FILE = 1,  NOUNLOAD, REPLACE, STATS = 10", db, fileRestore);
                    string sqlStop = string.Format("USE MASTER ALTER DATABASE [{0}] SET SINGLE_USER WITH ROLLBACK IMMEDIATE", db);
                    string sqlStart = string.Format("USE MASTER ALTER DATABASE [{0}] SET MULTI_USER", db);

                    SqlCommand comm = new SqlCommand(sqlStop, conn) { CommandType = CommandType.Text };
                    comm.ExecuteNonQuery();

                    comm = new SqlCommand(sqlRestore, conn) { CommandType = CommandType.Text };
                    comm.ExecuteNonQuery();

                    comm = new SqlCommand(sqlStart, conn) { CommandType = CommandType.Text };
                    comm.ExecuteNonQuery();

                    comm.Dispose();
                    conn.Close();

                    string s = Application.ExecutablePath;
                    MsgBox.CloseWaitForm();
                    MsgBox.ShowSuccessfulDialog("Đã phục hồi thành công. Chương trình sẽ khởi động lại");
                    Application.ExitThread();

                    Process.Start(s, "reset");
                }
                catch (Exception ex)
                {
                    MsgBox.CloseWaitForm();
                    Console.WriteLine(ex.Message);
                    WriteLog.WriteLogText(ex.Message);
                    MsgBox.ShowErrorDialog("Phục hồi dữ liệu không thành công: " + ex.Message);
                }
            }
        }
    }

}
